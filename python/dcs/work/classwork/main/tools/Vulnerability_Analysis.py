#!/usr/bin/python3
import os
import subprocess
import threading
import requests
from main.tools import banner,WEB_Application_Analysis,waiting,writeup,colors,information_gathering
from bs4 import BeautifulSoup


def main():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("Vulnerability Analysis")
        list_attacks=["Wpscan","Wireshark","Wapiti","Nmap","Legion","Nikto","go back"]
        for i in range(len(list_attacks)):
                print(colors.options,f"{i}) {list_attacks[i]}".title(),colors.reset)
        option = input(f"\n {colors.select}Select An Option ->{colors.reset}  ")
        if option=="0":
            print("\n[+] Wpscan")
            os.system("clear")
            Wpscan()
        elif option=="1":
            print("\n[+] Wireshark")
            os.system("clear")
            Wireshark()
        elif option=="2":
            print("\n[+] Wapiti")
            os.system("clear")
            WEB_Application_Analysis.Wapiti()
        elif option=="3":
            print("\n[+] Nmap")
            os.system("clear")
            information_gathering.Nmap()
        elif option=="4":
            print("\n[+] Legion")
            os.system("clear")
            Legion()
        elif option=="5":
            print("\n[+] Nikto")
            os.system("clear")
            Nikto()
        else:
            return

def Wireshark():
    os.system("clear")
    banner.main()
    banner.attack("Wireshark")
    github=github_getting_text("https://github.com/wireshark/wireshark",'p[dir="auto"]',0)
    banner.description(github.strip())
    ask=tool_writeups()
    if ask=="1":
        check_installed("wireshark",False)
        waiting.waiting()
    elif ask=="2":
        writeup.writeup({'How To Install & Use Wireshark On Kali Linux':'https://infosecscout.com/wireshark-on-kali-linux/','Wireshark Tool Documentation':'https://www.kali.org/tools/wireshark/','Wireshark Training':'https://www.wireshark.org/docs/','Wireshark – Resources':'https://blog.inf.ed.ac.uk/atate/2023/01/14/wireshark-resources/','Kerberos Wireshark Captures: A Windows Login Example':'https://medium.com/@robert.broeckelmann/kerberos-wireshark-captures-a-windows-login-example-151fabf3375a','Wireshark – Packet Capturing and Analyzing':'https://www.geeksforgeeks.org/wireshark-packet-capturing-and-analyzing/','https://unit42.paloaltonetworks.com/wireshark-tutorial-decrypting-https-traffic/':'https://unit42.paloaltonetworks.com/wireshark-tutorial-decrypting-https-traffic/'},'Wireshark')
    else:
        return

#you need to make a downlaod function for anger ip scanner
def Wpscan():
    os.system("clear")
    banner.main()
    banner.attack("Wpscan")
    banner.description("WPScan is a security scanner designed for testing the security of websites built using WordPress. WPScan was developed using the Ruby programming language and then released in the first version in 2019. The WPScan security scanner is primarily intended to be used by WordPress administrators and security teams to assess the security status of their WordPress installations. It is used to scan WordPress websites for known vulnerabilities both in WordPress and commonly used WordPress plugins and themes. The code base for WPScan is licensed under GPLv3")
    ask=tool_writeups()
    if ask=="1":
        check_installed("wpscan",True)
        waiting.waiting()
    elif ask=="2":
        writeup.writeup({'WPScan Intro: How to Scan for WordPress Vulnerabilities':'https://blog.sucuri.net/2021/05/wpscan-how-to-scan-for-wordpress-vulnerabilities.html/','WPScan:WordPress Pentesting Framework':'https://www.hackingarticles.in/wpscanwordpress-pentesting-framework/','How To Use WPScan to Test for Vulnerable Plugins and Themes in Wordpress':"https://www.digitalocean.com/community/tutorials/how-to-use-wpscan-to-test-for-vulnerable-plugins-and-themes-in-wordpress","How to Use wpscan tool in Kali Linux":"https://www.geeksforgeeks.org/how-to-use-wpscan-tool-in-kali-linux/","WPScan Usage Example [Enumeration + Exploit]":"https://www.cyberpunk.rs/wpscan-usage-example"},"Wpscan writeup.writeup")
    else:
        return

def Legion():
    os.system("clear")
    banner.main()
    banner.attack("Legion")
    github=github_getting_text("https://github.com/GoVanguard/legion",'p[class="f4 my-3"]',0)
    banner.description(github.strip())
    ask=tool_writeups()
    if ask=="1":
        check_installed("legion",False)
        waiting.waiting()
    elif ask=="2":
        writeup.writeup({'Legion Tool in Kali Linux':'https://www.geeksforgeeks.org/legion-tool-in-kali-linux','Legion -- Test Web Application Vulnerability Automatically':'https://www.kalilinux.in/2020/09/legion-kali-linux.html','How to use Legion application in Kali Linux | Information Gathering':'https://www.youtube.com/watch?v=5UAfXbP5Y0k'},'Nikto')
    else:
        return

def Nikto():
    os.system("clear")
    banner.main()
    banner.attack("Nikto")
    github=github_getting_text("https://en.wikipedia.org/wiki/Nikto_(vulnerability_scanner)",'p',1)
    banner.description(github.strip())
    ask=tool_writeups()
    if ask=="1":
        check_installed("nikto",True)
        waiting.waiting()
    elif ask=="2":
        writeup.writeup({'What is Nikto and it’s usages ?':'https://www.geeksforgeeks.org/what-is-nikto-and-its-usages/','Nikto: A Practical Website Vulnerability Scanner':'https://securitytrails.com/blog/nikto-website-vulnerability-scanner','Nikto Official Docs':'https://github.com/sullo/nikto/wiki'},'Nikto')
    else:
        return

def check_installed(name,needargs=False):
    file = open('/dev/null')
    proc = subprocess.Popen([f"dpkg -s {name} 2>/dev/null"], stdout=subprocess.PIPE, shell=True,stderr=file)
    #there keyfor success output and noththere for error output
    (there, notthere) = proc.communicate()
    if "install ok installed" not in there.decode():
                print(f"{colors.red}[-] Not Installed")
                print(f"[+] It Is Not Installed In Your Kali{colors.reset}")
                download=input(f"{colors.blue}[+] Do You Want To Install It?(y/n):{colors.reset}")
                if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                    os.system(f"sudo apt install {name} -y")
                    if needargs:
                        download=input(f"{colors.blue}Do You Want To Run The Tool?(y/n):{colors.reset}")
                        if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                            #when tool is of cli no need of thread
                            thread_run(name,needargs)
                    else:
                        download=input(f"{colors.blue}Do You Want To Run The Tool?(y/n):{colors.reset}")
                        if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                            #when tool is of gui it needs thread
                            threading.Thread(target=thread_run, args=(name,)).start()
    else:
                print(f"{colors.green}[+] Installed")
                print(f"[+] It Is Installed In Your Kali{colors.reset}")
                if needargs:
                        download=input(f"{colors.blue}Do You Want To Run The Tool?(y/n):{colors.reset}")
                        if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                            #when tool is of cli no need of thread
                            thread_run(name,needargs)
                else:
                        download=input(f"{colors.blue}Do You Want To Run The Tool?(y/n):{colors.reset}")
                        if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                            #when tool is of gui it needs thread
                            threading.Thread(target=thread_run, args=(name,)).start()


def thread_run(command,needargs=False):
    if needargs=="no-help":
        #it will run only help because it is in cli
        os.system(f"{command}")
    elif needargs:
        os.system(f"{command} --help")
    else:
        #for gui all errors/output will go in null 
       # os.system(f"{command} > /dev/null 2>&1")
        os.system(f"{command} 2> /dev/null 1>/dev/null")

def github_getting_text(link,selector,indexvalue):
    print("Please Wait....\r",end="")
    URL = link
    try:
        r = requests.get(URL)
        soup = BeautifulSoup(r.content, 'html5lib')
        paras = soup.select(selector)
        #check index value from test file
        return paras[indexvalue].text
    except:
        return f"{colors.red}NotLloaded Because No Internet Connection{colors.reset}"

def tool_writeups():
    print(f"{colors.options}1) TOOL(About,Installation)")
    print(f"2) Write Ups")
    print(f"3) Go Back..")
    ask=input(f"\n {colors.select}Select An Option ->{colors.reset}  ")
    return ask

#this function check tools installed or not that are not in kali repo.
#it take 3 arguments. 1) name of tool 2) Link of the tool 3) needargs
def which_check(name,link,needargs=False):
    proc = subprocess.Popen([f"which {name}"],stdout=subprocess.PIPE,shell=True)
    (there,nothere)=proc.communicate()
    if there:
        print("\n[+] Installed")
        print("[+] It Is Installed In Your Kali\n")
        if needargs:
                download=input(f"\n{colors.blue}Do You Want To Run The Tool?(y/n):{colors.reset}")
                if download.lower()=="y" or download.lower()=="yes":
                    #when tool is of cli no need of thread
                    thread_run(name,needargs)
        else:
                download=input(f"\n{colors.blue}Do You Want To Run The Tool?(y/n):{colors.blue}")
                if download.lower()=="y" or download.lower()=="yes":
                    #when tool is of gui it needs thread
                    threading.Thread(target=thread_run, args=(name,)).start()
    else:
        print(f"{colors.blue}\n[+] It Is Not Installed In Your Kali{colors.reset}")    
        download=input(f"{colors.blue}[+] Do You Want To Install It?(y/n):{colors.reset}")
        if download.lower()=="y" or download.lower()=="yes":
            os.system(f"go install {link}")
            # os.system("go install github.com/projectdiscovery/katana/cmd/katana@latest")
            os.system(f'sudo cp ~/go/bin/{name} /usr/bin')
            if needargs:
                download=input(f"{colors.blue}\nDo You Want To Run The Tool?(y/n):{colors.reset}")
                if download.lower()=="y" or download.lower()=="yes":
                    #when tool is of cli no need of thread
                    thread_run(name,needargs)
            else:
                download=input(f"{colors.blue}\nDo You Want To Run The Tool?(y/n):{colors.reset}")
                if download.lower()=="y" or download.lower()=="yes":
                    #when tool is of gui it needs thread
                    threading.Thread(target=thread_run, args=(name,)).start()
if __name__=='__main__':
    main()
