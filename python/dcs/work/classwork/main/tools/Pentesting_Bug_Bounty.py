
from main.tools import banner,run_on_browser,waiting,writeup,colors
import os
import subprocess
import threading
import time
import requests
from bs4 import BeautifulSoup

#main function
def main():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("Pentesting and Bug Bounty")
        list_attacks=["Katana","Gau","Gobuster","Waybackurls","Httpx","Httprobe","Eyewitness","gowitness","go back"]
        for i in range(len(list_attacks)):
                print(colors.options,f"{i}) {list_attacks[i]}".title(),colors.reset)
        option = input(f"\n {colors.select}Select An Option ->{colors.reset}  ")
        if option=="0":
            print("\n[+] Katana")
            os.system("clear")
            Katana()
        elif option=="1":
            print("\n[+] Gau")
            os.system("clear")
            Gau()
        elif option=="2":
            print("\n[+] Gobuster")
            os.system("clear")
            Gobuster()
        elif option=="3":
            print("\n[+] Waybackurls")
            os.system("clear")
            Waybackurls()
        elif option=="4":
            print("\n[+] Httpx")
            os.system("clear")
            Httpx()
        elif option=="5":
            print("\n[+] Httprobe")
            os.system("clear")
            Httprobe()
        elif option=="6":
            print("\n[+] Eyewitness")
            os.system("clear")
            Eyewitness()
        elif option=="7":
            print("\n[+] gowitness")
            os.system("clear")
            gowitness()
        else:
            return

def Katana():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("Katana")
        github=github_getting_text("https://github.com/projectdiscovery/katana",'p[class="f4 my-3"]',0)
        banner.description(github.strip())
        ask=tool_writeups()
        if ask=="1":
            which_check("katana",'github.com/projectdiscovery/katana/cmd/katana@latest',True)
            waiting.waiting()
        elif ask=="2":
            writeup.writeup({'Katana – Crawling and Spidering Framework':'https://www.geeksforgeeks.org/katana-crawling-and-spidering-framework/','Katana a next-generation crawling and spidering framework':'https://github.com/projectdiscovery/katana/blob/main/README.md','Katana- A Python Tool For Google Hacking':'https://hakin9.org/katana-a-python-tool-for-google-hacking/'},'Katana')
        else:
            return

def Gau():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("Gau")
        github=github_getting_text("https://github.com/lc/gau",'p[class="f4 my-3"]',0)
        banner.description(github.strip())
        # print('\n')
        ask=tool_writeups()
        if ask=="1":
            which_check("gau",'github.com/lc/gau/v2/cmd/gau@latest',True)
            waiting.waiting()
        elif ask=="2":
            writeup.writeup({'gau (GetAllUrls) Review – Tool For Discovering URL in Kali Linux':'https://www.geeksforgeeks.org/gau-getallurls-review-tool-for-discovering-url-in-kali-linux/','Quick Tutorial: gau (GetAllURLs)':'https://allabouttesting.org/quick-tutorial-gau-getallurls/','Fetch URLs with GetAllUrls (GAU)':'https://bughacking.com/fetch-urls-with-getallurls-gau/'},'Gau')
        else:
            return

def Gobuster():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("Gobuster")
        github=github_getting_text("https://github.com/OJ/gobuster",'p[dir="auto"]',0)
        github1=github_getting_text("https://github.com/OJ/gobuster",'ul[dir="auto"]',0)
        banner.description(github.strip()+'\r\n - '.join(github1.strip().split('\n')))
        # print('\n')
        ask=tool_writeups()
        if ask=="1":
            which_check("gobuster",'github.com/OJ/gobuster/v3@latest',True)
            waiting.waiting()
        elif ask=="2":
            writeup.writeup({'How to use Gobuster for Scanning Website’s Subdomains & Directories?':'https://spinningsecurity.com/how-to-use-gobuster-for-scanning-websites/','https://blog.intigriti.com/2021/07/05/hacker-tools-gobuster/':'https://blog.intigriti.com/2021/07/05/hacker-tools-gobuster/','Gobuster – Penetration Testing Tools in Kali Tools':'https://www.geeksforgeeks.org/gobuster-penetration-testing-tools-in-kali-tools/','Perform Pentest Recon Using GoBuster':'https://vickieli.dev/hacking/gobuster/','Gobuster for directory, DNS and virtual hosts bruteforcing':'https://erev0s.com/blog/gobuster-directory-dns-and-virtual-hosts-bruteforcing/','Gobuster Tutorial – How to Find Hidden Directories, Sub-Domains, and S3 Buckets':'https://www.freecodecamp.org/news/gobuster-tutorial-find-hidden-directories-sub-domains-and-s3-buckets/'},'Gau')
        else:
            return

def Waybackurls():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("Waybackurls")
        github=github_getting_text("https://github.com/tomnomnom/waybackurls",'p[class="f4 my-3"]',0)
        banner.description(github.strip())
        # print('\n')
        ask=tool_writeups()
        if ask=="1":
            which_check("waybackurls",'github.com/tomnomnom/waybackurls@latest',True)
            waiting.waiting()
        elif ask=="2":
            writeup.writeup({'https://www.geeksforgeeks.org/waybackurls-fetch-all-the-urls-that-the-wayback-machine-knows-about-for-a-domain/':'https://www.geeksforgeeks.org/waybackurls-fetch-all-the-urls-that-the-wayback-machine-knows-about-for-a-domain/','Waybackurls: A CLI Wayback Machine Solution for Fetching Webpages':'https://bughacking.com/waybackurls-cli-wayback-machine-solution-fetching-webpages/','Waybackurls – Best Wey to Fetch all the URLs with Tutorial':'https://unethicalhacker.in/waybackurls/'},'Waybackurls')
        else:
            return

def Httpx():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("Httpx")
        github=github_getting_text("https://github.com/projectdiscovery/httpx",'p[class="f4 my-3"]',0)
        banner.description(github.strip())
        # print('\n')
        ask=tool_writeups()
        if ask=="1":
            check_installed("httpx-toolkit",True)
            waiting.waiting()
        elif ask=="2":
            writeup.writeup({'Httpx Advanced tool for Penetration Tester':'https://securiumsolutions.com/blog/httpx-advanced-tool-for-penetration-tester/','A Detailed Guide on httpx':'https://www.hackingarticles.in/a-detailed-guide-on-httpx/','Running httpX':'https://github.com/projectdiscovery/httpx/blob/main/README.md'},'Httpx')
        else:
            return

def Httprobe():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("Httprobe")
        github=github_getting_text("https://github.com/tomnomnom/httprobe",'p[class="f4 my-3"]',0)
        banner.description(github.strip())
        # print('\n')
        ask=tool_writeups()
        if ask=="1":
            check_installed("httprobe",True)
            waiting.waiting()
        elif ask=="2":
            writeup.writeup({'HTTPROBE':'https://tzusec.com/httprobe/','TOMNOMNOM HTTPROBE USE':'https://oscp.medium.com/tomnomnom-httprobe-use-23465958fbd8'},'Httprobe')
        else:
            return

def Eyewitness():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("Eyewitness")
        github=github_getting_text("https://github.com/FortyNorthSecurity/EyeWitness",'p[class="f4 my-3"]',0)
        banner.description(github.strip())
        # print('\n')
        ask=tool_writeups()
        if ask=="1":
            check_installed("eyewitness",True)
            waiting.waiting()
        elif ask=="2":
            writeup.writeup({'TOOLS EyeWitness – Hacker Tools: Hacking through screenshots':'https://blog.intigriti.com/2022/01/11/hacker-tools-eyewitness/','Screenshot Tool: EyeWitness':'https://www.whiteoaksecurity.com/blog/screenshot-tool-part-1-eyewitness/','EyeWitness -- Web Footprints and Enumeration':'https://www.kalilinux.in/2021/06/eyewitness-web-footprints-and.html','EyeWitness Official documentation':'https://github.com/FortyNorthSecurity/EyeWitness/blob/master/README.md'},'Eyewitness')
        else:
            return

def gowitness():
    while True:
        os.system("clear")
        banner.main()
        banner.attack("gowitness")
        github=github_getting_text("https://github.com/sensepost/gowitness",'p[dir="auto"]',1)
        banner.description(github.strip())
        # print('\n')
        ask=tool_writeups()
        if ask=="1":
            which_check("gowitness",'github.com/sensepost/gowitness@latest',True)
            waiting.waiting()
        elif ask=="2":
            writeup.writeup({'Screenshot Tool: Gowitness':'https://www.whiteoaksecurity.com/blog/screenshot-tool-part-4-gowitness/','Gowitness : A Golang Web Screenshot Utility':'https://kalilinuxtutorials.com/gowitness/','Gowitness – A Golang, Web Screenshot Utility Using Chrome Headless':'https://haxf4rall.com/2020/01/17/gowitness-a-golang-web-screenshot-utility-using-chrome-headless/'},'Gowitness')
        else:
            return

def github_getting_text(link,selector,indexvalue):
    print("Please Wait....\r",end="")
    URL = link
    try:
        r = requests.get(URL)
        soup = BeautifulSoup(r.content, 'html5lib')
        paras = soup.select(selector)
        #check index value from test file
        return paras[indexvalue].text
    except:
        return f"{colors.red}Not Loaded Because No Internet Connection{colors.reset}"

def tool_writeups():
    print(f"{colors.options}1) TOOL(About,Installation)")
    print(f"2) Write Ups")
    print(f"3) Go Back..")
    ask=input(f"\n {colors.select}Select An Option ->{colors.reset}  ")
    return ask

def check_installed(name,needargs=False):
    proc = subprocess.Popen([f"dpkg -s {name} 2>/dev/null"], stdout=subprocess.PIPE, shell=True)
    #there keyfor success output and noththere for error output
    (there, notthere) = proc.communicate()
    if "install ok installed" not in there.decode():
                print(f"{colors.red}[-] Not Installed")
                print(f"[+] it is Not Installed in your Kali{colors.reset}")
                download=input(f"{colors.blue}[+] Do You Want To Install It?(y/n):{colors.reset}")
                if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                    os.system(f"sudo apt install {name} -y")
                    if needargs:
                        download=input(f"{colors.blue}Do You Want To Run The Tool?(y/n): {colors.reset}")
                        if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                            #when tool is of cli no need of thread
                            thread_run(name,needargs)
                    else:
                        download=input(f"{colors.blue}Do You Want To Run The Tool?(y/n):{colors.reset} ")
                        if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                            #when tool is of gui it needs thread
                            threading.Thread(target=thread_run, args=(name,)).start()
    else:
                print(f"{colors.green}[+] Installed")
                print(f"[+] It Is Installed In Your Kali{colors.reset}")
                if needargs:
                        download=input(f"{colors.blue}Do You Want To Run The Tool?(y/n): {colors.reset}")
                        if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                            #when tool is of cli no need of thread
                            thread_run(name,needargs)
                else:
                        download=input(f"{colors.blue}Do You Want To Run The Tool?(y/n): {colors.reset}")
                        if download=="y" or download=="Y" or download=="Yes" or download=="yes":
                            #when tool is of gui it needs thread
                            threading.Thread(target=thread_run, args=(name,)).start()

def thread_run(command,needargs=False):
    if needargs=="no-help":
        #it will run only help because it is in cli
        os.system(f"{command}")
    elif needargs:
        os.system(f"{command} -h")
    else:
        #for gui all errors/output will go in null 
        os.system(f"{command}")
        # os.system(f"{command} 2> /dev/null 2>&1")

#this function check tools installed or not that are not in kali repo.
#it take 3 arguments. 1) name of tool 2) Link of the tool 3) needargs
def which_check(name,link,needargs=False):
    proc = subprocess.Popen([f"which {name}"],stdout=subprocess.PIPE,shell=True)
    (there,nothere)=proc.communicate()
    if there:
        print(f"\n{colors.green}[+] Installed")
        print(f"[+] It Is Installed In Your Kali{colors.reset}\n")
        if needargs:
                download=input(f"{colors.blue}\nDo You Want To Run The Tool?(y/n): {colors.reset} ")
                if download.lower()=="y" or download.lower()=="yes":
                    #when tool is of cli no need of thread
                    thread_run(name,needargs)
        else:
                download=input(f"{colors.blue}\nDo You Want To Run The Tool?(y/n):{colors.reset} ")
                if download.lower()=="y" or download.lower()=="yes":
                    #when tool is of gui it needs thread
                    threading.Thread(target=thread_run, args=(name,)).start()
    else:
        print(f"{colors.red}\n[+] It Is Not Installed In Your Kali{colors.reset}")    
        download=input(f"{colors.blue}[+] Do You Want To Install It?(y/n):{colors.reset} ")
        if download.lower()=="y" or download.lower()=="yes":
            os.system(f"go install {link}")
            # os.system("go install github.com/projectdiscovery/katana/cmd/katana@latest")
            os.system(f'sudo cp ~/go/bin/{name} /usr/bin')
            if needargs:
                download=input(f"{colors.blue}\nDo You Want To Run The Tool?(y/n): {colors.reset}")
                if download.lower()=="y" or download.lower()=="yes":
                    #when tool is of cli no need of thread
                    thread_run(name,needargs)
            else:
                download=input(f"{colors.blue}\nDo You Want To Run The Tool?(y/n):{colors.reset} ")
                if download.lower()=="y" or download.lower()=="yes":
                    #when tool is of gui it needs thread
                    threading.Thread(target=thread_run, args=(name,)).start()

if __name__=='__main__':
    main()
